\import Cat
\import Iso
\import Set
\import Unique
\import lib.Paths
\import Three


\record Product
 {C : Cat} (I : \Set)
 (a : I -> C.Ob)
 (p : C.Ob)
 (pi : \Pi (i : I) -> p ->> {C} a i)
 (prod : \Pi (x : C.Ob) (f : \Pi (i : I) -> x ->> {C} a i) -> Unique (x ->> {C} p) (\lam pr => \Pi (j : I) -> pi j cmp {C} pr = f j) )


--product object is unique up to isomorphism
\func product_ob_unique {C : Cat} {I : \Set} {a : I -> C.Ob} (pr pr' : Product {C} I a) : pr.p ~= {C} pr'.p =>
      \new Iso {C} {pr.p} {pr'.p} {
       | f => elem {pr'.prod pr.p pr.pi}
       | f_op => elem {pr.prod pr'.p pr'.pi}
       | l_comp => iso_one_side pr' pr
       | r_comp => iso_one_side pr pr'
    } \where {
      \open Unique (elem)
      \func iso_one_side {C : Cat} {I : \Set } {a : I -> C.Ob } (pr pr' : Product {C} I a) :
        elem {pr'.prod pr.p pr.pi} cmp {C} elem {pr.prod pr'.p pr'.pi} = C.id =>
         \let | f : Unique => pr'.prod pr.p pr.pi
              | f-1 : Unique => pr.prod pr'.p pr'.pi
              | res => f.elem cmp {C} f-1.elem
              | eqs (i : pr.I)  => transport (\lam a => a = pr'.pi i) (C.assoc (pr'.pi i) f.elem f-1.elem)
                                                    (transport {C.Hom pr.p (pr.a i)}
                                                    (\lam h => h cmp {C} f-1.elem = pr'.pi i)
                                                    (inv (f.prop i)) (f-1.prop i))
         \in product_eq_id pr' res eqs

      \func product_eq_id {C : Cat}(P : Product {C}) (f : C.Hom P.p P.p ) (eqs : \Pi (i : P.I) -> P.pi i cmp {C} f = P.pi i) : f = C.id =>
          \let | u : Unique => P.prod P.p (P.pi)
               | u_eq_id => u.unique C.id (\lam i => C.r_unit (P.pi i))
               | u_eq_f => u.unique f eqs
          \in (inv u_eq_f) *> u_eq_id
    }

\record Product2
   {C : Cat}
   (a b : Cat.Ob {C})
   (p : C.Ob)
   (pi1 : p ->> {C} a)
   (pi2 : p ->> {C} b)
   (prod : \Pi (x : C.Ob) (f : x ->> {C} a) (g : x ->> {C} b) -> Unique (x ->> {C} p) (\lam pr => \Sigma
    (pi1 cmp {C} pr = f)
    (pi2 cmp {C} pr = g)
   ))


\func product_inv {C : Cat} (a b : Cat.Ob {C}) (pab : Product2 {C} a b) : Product2 {C} b a pab.p \cowith
    | pi1 => pab.pi2
    | pi2 => pab.pi1
    | prod x f1 f2 =>
        \let orig : Unique => pab.prod x f2 f1
        \in \new Unique orig.A {
          | B pr => \Sigma (pab.pi2 cmp {C} pr = f1) (pab.pi1 cmp {C} pr = f2)
          | elem => orig.elem
          | prop => (orig.prop.2, orig.prop.1)
          | unique f' prod' => orig.unique f' (prod'.2, prod'.1)
          }

\func product_symmetry {C : Cat} (a b : Cat.Ob {C}) (pab : Product2 {C} a b) : product_inv b a (product_inv a b pab) = pab => idp



\func product_associativity {C : Cat} (a b c : Cat.Ob {C})
         (pab : Product2 {C} a b)
         (pab_c : Product2 {C} pab.p c )
         (pbc : Product2 {C} b c)
         (pa_bc : Product2 {C} a pbc.p) : pab_c.p ~= {C} pa_bc.p => {?} \where{


    \func prod_of_prod_ass_l {C : Cat} (a b c : C.Ob)
                             (pab : Product2 {C} a b) (pab_c : Product2 {C} pab.p c)
                             : Product {C} three (make3X a b c) pab_c.p  =>
       \let
            | ob   => make3X a b c
            | pi idx => \case idx \as i \return (C.Hom pab_c.p (ob i)) \with {
                      | el3_1 => pab.pi1 cmp {C} pab_c.pi1
                      | el3_2 => pab.pi2 cmp {C} pab_c.pi1
                      | el3_3 => pab_c.pi2
                     }
            | prod (x : C.Ob) (f : \Pi (i : three) -> C.Hom x (ob i)) =>
               \let
                    | ut m => \Pi (i : three) -> (pi i cmp {C} m = f i)
                    | pab_x : Unique => pab.prod x (f el3_1) (f el3_2)
                    | pab_c_x : Unique => pab_c.prod x pab_x.elem (f el3_3)
                    | pm => pab_c_x.elem
                    | prop idx => \case idx \as i \return (pi i cmp {C} pm = f i) \with {
                       | el3_1 => C.assoc (pab.pi1) (pab_c.pi1) pm *> transport (\lam m => pab.pi1 cmp {C} m = f el3_1) (inv pab_c_x.prop.1) pab_x.prop.1
                       | el3_2 => C.assoc (pab.pi2) (pab_c.pi1) pm *> transport (\lam m => pab.pi2 cmp {C} m = f el3_2) (inv pab_c_x.prop.1) pab_x.prop.2
                       | el3_3 => pab_c_x.prop.2
                    }
                    | qq (am : C.Hom x pab_c.p) (am_eqs : ut am) : pm = am =>
                        \let | eq1 : pab_x.elem = pab_c.pi1 cmp {C} am => pab_x.unique (pab_c.pi1 cmp {C} am) (
                             inv (ass {C}) *> (am_eqs el3_1),
                             inv (ass {C}) *> (am_eqs el3_2)
                           )
                        \in pab_c_x.unique am (inv eq1 , am_eqs el3_3)

               \in \new Unique ( x ->> {C} pab_c.p) ut pab_c_x.elem prop qq

      \in \new Product {C} three ob pab_c.p {
       | pi => pi
       | prod  => prod
      }
   }

