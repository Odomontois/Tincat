\import Cat
\import Set
\import lib.Paths

\record FunctorStruct (C D : Cat)
                      (ob : C.Ob -> D.Ob)
                      (map : \Pi {a b : C.Ob} (C.Hom a b) -> D.Hom (ob a) (ob b))

\record FunctorIdLaw (id : \Pi {a : C.Ob} -> map (C.id {a}) = D.id {ob a}) \extends FunctorStruct

\record FunctorCompLaw (
   comp : \Pi {a b c : C.Ob} (f : C.Hom b c) (g : C.Hom a b) -> D.comp (map f) (map g) = map (C.comp f g)
  ) \extends FunctorStruct

\record Functor \extends  FunctorIdLaw, FunctorCompLaw
                \where {

        \coerce struct (F : Functor): FunctorStruct F.C F.D F.ob F.map => \new FunctorStruct F.C F.D F.ob F.map

        \func Id {C : Cat} : Functor \cowith
            | C => C
            | D => C
            | ob x => x
            | map f => f
            | id => \lam {a} => idp
            | comp => \lam {a} {b} {c} f g => idp


        \func Comp {C D E : Cat } (F : Functor D E) (G : Functor C D) : Functor \cowith
         | C => C
         | D => E
         | ob x => F.ob (G.ob x)
         | map => \lam {a} {b} f => F.map (G.map f)
         | id => \lam {a} => pmap F.map G.id *> F.id
         | comp => \lam {a} {b} {c} f g => F.comp (G.map f) (G.map g) *> pmap F.map (G.comp f g)

        \func equiv {C D : Cat} (ob : C.Ob -> D.Ob )
                     (map : \Pi {a b : C.Ob} (C.Hom a b) -> D.Hom (ob a) (ob b))  (F G : Functor C D ob map) : F = {Functor C D} G =>
            \let  | idEq {a : C.Ob} =>
                        D.homSet (map (C.id {a})) (D.id {ob a}) F.id G.id
                  | compEq {a b c : C.Ob} (f : C.Hom b c) (g : C.Hom a b) =>
                        D.homSet (D.comp (map f) (map g)) (map (C.comp f g)) (F.comp f g) (G.comp f g)
            \in path ( \lam i => \new Functor C D ob map {
                  | id {a : C.Ob} => idEq @ i
                  | comp {a b c : C.Ob} (f : C.Hom b c) (g : C.Hom a b) => compEq f g @ i
            })

       -- лолкот гарантирует
        \func l_unit {C D : Cat} (F : Functor C D) : Comp {C} {D} {D} Id F = F =>
            \let | fcomp => Comp {C} {D} {D} Id F
                  | F' => \new Functor C D F.ob F.map F.id F.comp
                  | eq : fcomp = F' => equiv F.ob F.map fcomp F'
                  | eq2 : F' = F => idp
            \in eq *> eq2

        \func r_unit {C D : Cat} (F : Functor C D) : Comp {C} {C} {D} F Id = F =>
            \let | fcomp => Comp {C} {C} {D} F Id
                  | F' => \new Functor C D F.ob F.map F.id F.comp
                  | eq : fcomp = F' => equiv F.ob F.map fcomp F'
                  | eq2 : F' = F => idp
            \in eq *> eq2

        \func assoc {A B C D : Cat} (F : Functor C D) (G : Functor B C) (H : Functor A B) :
            Comp (Comp {B} {C} {D} F G) H = {Functor A D} Comp F (Comp {A} {B} {C} G H)  =>
             \let | left => Comp {A} {B} {D} (Comp {B} {C} {D} F G) H
                   | right => Comp {A} {C} {D} F (Comp {A} {B} {C} G H)
             \in equiv {A} {D} (Functor.ob {left}) (Functor.map {left}) left right
    }

