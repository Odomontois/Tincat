\import Cat
\import Paths
\import Category
\open op
\import  Set.Category
\import NatTrans

\record Functor (C D : Precat) {
  | ob : C -> D
  | map {a b : C} (f : a ->> b) : (ob a) ->> (ob b)
  \property functor_id (a : C) : map (id a) = id (ob a)
  \property func_comp {a b c : C} (f : b ->> c) (g : a ->> b) : (map f) `o` (map g) = map (f `o` g)

  \func fop : Functor (op C) (op D)  \cowith
    | ob c => ob c
    | map f => map f
    | functor_id a => functor_id _
    | func_comp f g => func_comp g f

}  \where {
  \func Id (C : Precat) : Functor C C  \cowith
    | ob x => x
    | map f => f
    | functor_id  f => idp
    | func_comp f g => idp

  \func o-functor {C D E : Precat} (F : Functor D E) (G : Functor C D) : Functor C E \cowith
    | ob x => F.ob (G.ob x)
    | map {a} {b} f => F.map (G.map f)
    | functor_id f => pmap F.map (G.functor_id f) *> F.functor_id _
    | func_comp {a} {b} {c} f g => F.func_comp (G.map f) (G.map g) *> pmap F.map (G.func_comp f g)


  \func \infixr 5 <o> {C D E : Precat} (F : Functor D E) (G : Functor C D) : Functor C E => o-functor F G

  \func const-functor {C D : Precat} (d : D) : Functor C D \cowith
    | ob c => d
    | map _ => id d
    | functor_id c => idp
    | func_comp f g => id-left _

  \func equiv {C D : Precat}
              (ob : C -> D)
              (map : \Pi {A B : C} (A ->> B) -> (ob A ->> ob B))
              (F G : Functor C D ob map) : F = {Functor C D} G =>
    \let | idEq (a : C): F.functor_id a = G.functor_id a => Path.inProp _ _
         | compEq {a b c : C} (f : b ->> c) (g : a ->> b) : F.func_comp f g = G.func_comp f g => Path.inProp _ _
    \in path (\lam i => \new Functor C D ob map {
      | functor_id a => idEq a @ i
      | func_comp f g => compEq f g @ i
    })

  \func functor= {C D : Precat}  (F G : Functor C D)
                 (eob : \Pi (a : C) -> F.ob a = G.ob a)
                 (emap : \Pi {a b : C} (f : a ->> b) -> Path (\lam i => eob a @ i ->> eob b @ i) (F.map f) (G.map f) ) : F = G =>
    \let | idEq (a : C) =>  pathInProp (\lam i => emap (id a) @ i = id (eob a @ i)) (F.functor_id a) (G.functor_id a)
         | compEq {a b c : C} (f : b ->> c) (g : a ->> b) =>
           pathInProp  (\lam i => (emap f @ i) `o` (emap g @ i) = emap (f `o` g) @ i) (F.func_comp f g) (G.func_comp f g)
    \in  path (\lam i => \new Functor C D (\lam a => eob a @ i) (\lam f => emap f @ i) (\lam a => idEq a @ i) (\lam f g => compEq f g @ i) )

  \func Id-left {C D : Precat}  (F : Functor C D) : o-functor {C} {D} {D} (Id D) F = F => equiv F.ob F.map _ _

  \func Id-right {C D : Precat} (F : Functor C D) : o-functor {C} {C} {D} F (Id C) = F => equiv F.ob F.map _ _

  \func assoc {A B C D : Precat} (F : Functor C D) (G : Functor B C) (H : Functor A B) :
    o-functor (o-functor {B} {C} {D} F G) H = {Functor A D} o-functor F (o-functor {A} {B} {C} G H) =>
    \let left : Functor => o-functor (o-functor {B} {C} {D} F G) H
    \in equiv left.ob left.map _ _

  \func homFunctor {C : Precat} (u : C.Ob) : Functor C SetCat \cowith
    | ob a => (Hom u a)
    | map f g => o f g
    | functor_id a => path (\lam i f => id-right f @ i)
    | func_comp f g => path (\lam i h => o-assoc h g f @ i)

  \func discreteFunctor {X : \Set} {C : Precat} (pget : X -> C) : Functor (discreteCat X) C =>
    DiscreteFunctor.functor {\new DiscreteFunctor pget} \where {
    \record DiscreteFunctor {X : \Set} {C : Precat} (pget : X -> C) {
      \func arrT (s : X) {x y : X} (e : x = y) (i : I) => pget s ->> pget (e @ i)

      \lemma coeComp {x y z : X} (f : y = z) (g : x = y) =>
        \let cg => coeMap g right
        \in coe (\lam i => coeMap f i `o` cg = coe (arrT x f) cg i) (C.id-right cg) right

      \func coeMap {x x' : X} (e : x = x') => coe (arrT x e) (id _)

      \lemma idpPath {x y z : X} (f : y = z) (g : x = y) => pathInProp (\lam i => g @ i = (g *> f) @ i) idp f

      \func functor  : Functor (discreteCat X) C \cowith
        | ob x => pget x
        | map {a} {b} f => coeMap f right
        | functor_id a => idp
        | func_comp {a} f g => coeComp f g *> inv (transport_*>  (\lam x => pget a ->> pget x) g f (id _))
    }
  }
}
