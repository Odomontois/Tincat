\import Cat
\import Set
\import lib.Paths

\record FunctorStruct (C D : Cat)
                      (ob : C.Ob -> D.Ob)
                      (map : \Pi {a b : C.Ob} (C.Hom a b) -> D.Hom (ob a) (ob b))

\record FunctorIdLaw (id : \Pi {a : C.Ob} -> map (C.id {a}) = D.id {ob a}) \extends FunctorStruct

\record FunctorCompLaw (
   comp : \Pi {a b c : C.Ob} (f : C.Hom b c) (g : C.Hom a b) -> D.comp (map f) (map g) = map (C.comp f g)
  ) \extends FunctorStruct

\record Functor \extends FunctorStruct, FunctorIdLaw, FunctorCompLaw
                \where {

        \coerce struct (F : Functor) : FunctorStruct => F

        \func Id {C : Cat} : Functor \cowith
            | C => C
            | D => C
            | ob x => x
            | map f => f
            | id => \lam {a} => idp
            | comp => \lam {a} {b} {c} f g => idp


        \func Comp {C D E : Cat } (F : Functor D E) (G : Functor C D) : Functor \cowith
         | C => C
         | D => E
         | ob x => F.ob (G.ob x)
         | map => \lam {a} {b} f => F.map (G.map f)
         | id => \lam {a} => pmap F.map G.id *> F.id
         | comp => \lam {a} {b} {c} f g => F.comp (G.map f) (G.map g) *> pmap F.map (G.comp f g)

        \func equiv {C D : Cat} (F G : Functor C D) (eq : struct F = struct G) : F = G => {?}

--       \func equiv   {C D : Cat} (F G : Functor {C} {D})
--                     (tOb : \Pi {a : C.Ob} -> F.ob a = G.ob a)
--                     (tMap : \Pi {a b : C.Ob} (f : C.Hom a b) -> Path (\lam i => D.Hom (tOb {a} @ i) (tOb {b} @ i)) (F.map f) (G.map f))
--                     : F = G =>
--                     \let | idEqT (a : C.Ob) (f: Functor =>
--                          | fhs => propId {\lam {a} => F.m}
--                     \in path (\lam i => \new Functor {
--                        | C => C
--                        | D => D
--                        | ob => \lam a => tOb {a} @ i
--                        | map => \lam {a} {b} f => tMap {a} {b} f @ i
--                        | k_id => \lam {a} =>
--                                \let | dOb => tOb {a} @ i
--                                      | lhs => tMap {a} {a} (C.id) @ i
--                                      | rhs => D.id {tOb {a} @ i}

--  (F.map (C.id {a}) = D.id {F.ob a} ) = (G.map (C.id) = D.id {G.ob a})
--                                \in D.homSet {dOb} {dOb} lhs rhs (F.k_id {a}) (G.k_id {a}) @ i
--                        | k_comp => {?}
--                     })

       -- лолкот гарантирует
       \func l_unit {C D : Cat} (F : Functor C D) : Comp {C} {D} {D} Id F = F => {?}
    }