\import lib.Data.Unit
\import lib.Paths

-- unique element of A such that B
\record Unique
    (A : \Type)
    (B : A -> \Type)
    (a : A)
    (b : B a)
    (unique : \Pi (a' : A) -> B a' -> a = a')

--there is a unique way to create unique things
\func unique_fun (U : \Type) (A : U -> \Type) (B : \Pi (u : U) -> A u -> \Type)
                 (f : \Pi (u : U) -> Unique (A u) (B u)):
                 Unique (\Pi (u : U) -> A u) (\lam bf => \Pi (u : U) -> B u (bf u)) =>
                 \let | a u => Unique.a {f u}
                 \in \new Unique (\Pi (u : U) -> A u) (\lam bf => \Pi (u : U) -> B u (bf u)){
                    | a => a
                    | b u => Unique.b {f u}
                    | unique => \lam af' bf' => funExt A a af' (\lam u => Unique.unique {f u} (af' u) (bf' u))
                    }

\record UniqueT (T : \Type)
                (t : T)
                (unique : \Pi (a' : T) -> t = a')

\func uniqueT_to_unique (u : UniqueT) =>
    \new Unique u.T (\lam _ => Unit) u.t unit (\lam a' _ => u.unique a')
