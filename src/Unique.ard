\import HLevel
\import Paths

-- unique element of A such that B

\record Unique (A : \Set) (B : A -> \Prop){
  | elem : A
  \property prop : B elem
  | unique (a : A) (b : B a) : elem = a
} \where {
  \use \level uniqueIsProp (A : \Set) (B : A -> \Prop) (u u' : Unique A B) : u = u' =>
    \let u=u' => u.unique u'.elem u'.prop
    \in path (\lam i => \new Unique A B {
      | elem =>  u=u' @ i
      | prop => pathInProp (\lam i => B (u=u' @ i)) u.prop u'.prop @ i
      | unique (a : A) (b : B a) => pathInProp (\lam i => u=u' @ i = a ) (u.unique a b) (u'.unique a b) @ i
    })

  \use \coerce prop->unique {U : \Prop} (u : U) :  Unique U (\lam _ => U) \cowith
    | elem => u
    | prop => u
    | unique u' _ => Path.inProp u u'
}

\record Singleton \extends Unique{
  \property singleton : isProp A
  | B _ => \Sigma
  | prop => ()
  | unique s' _ => singleton elem s'
} \where {
  \func singletonEqs {A : \Set} {s s' : Singleton A} (p : s.elem = s'.elem) : s = s' =>
    path (\lam i => \new Singleton A (p @ i) s.singleton)

  \use \level singleProp (T : \Set) (s s' : Singleton T) : s = s' => singletonEqs (s.singleton s.elem s'.elem)

  \use \coerce prop->Singleton {U : \Prop} (u : U) : Singleton U \cowith
      | elem => u
      | singleton => Path.inProp
}








