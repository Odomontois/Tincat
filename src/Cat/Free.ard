\import Cat
\import Category
\import Data.Bool
\import Function.Meta
\import Functor
\import Logic
\import Paths
\import Logic.Meta

\data Free {A : \Set} (arr : A -> A -> \Set) (x y : A) : \Set
  | free-id (x = y)
  | free-comp {m : A} (f : arr m y) (g : Free arr x m)
  \where {
    \cons \infixr 5 -: {A : \Set} {arr : A -> A -> \Set} {x y m : A} (f : arr m y) (g : Free arr x m) => free-comp f g

    --    \cons id {A : \Set} {arr : A -> A -> \Set} {x : A} : Free arr x x  => free-id idp

    \use \coerce embed {A : \Set} {arr : A -> A -> \Set} {x y : A} (f : arr x y) : Free arr x y =>
      free-comp f (free-id idp)

    \func \infixr 6 concat \alias \infixr 6 o: {A : \Set} {arr : A -> A -> \Set} {x y z : A} (f : Free arr y z) (g : Free arr x y) : Free arr x z \elim f, g
      | free-id y=z, free-id x=z => free-id (x=z *> y=z)
      | free-id y=z, free-comp {m} m->z g' => free-comp (transport (arr m) y=z m->z) g'
      | free-comp m->y f', g => free-comp m->y (concat f' g)

    \lemma concat-id-left {A : \Set} {arr : A -> A -> \Set} {x y : A} {f : Free arr x y} : concat f (free-id idp) = f \elim f
      | free-id x=y => pmap free-id (Path.inProp _ _)
      | free-comp h f' => pmap (free-comp h) concat-id-left

    \lemma concat-id-right {A : \Set} {arr : A -> A -> \Set} {x y : A} {f : Free arr x y} : concat (free-id idp) f = f \elim f
      | free-id x=y => pmap free-id (Path.inProp _ _)
      | free-comp h f' => idp

    \lemma concat-assoc {A : \Set} {arr : A -> A -> \Set} {w x y z : A}
                        {h : Free arr y z} {g : Free arr x y} {f : Free arr w x}  : (h o: g) o: f  = h o: (g o: f) \elim h, g, f {
      | free-id y=z , free-id x=y, free-id w=x => pmap free-id (Path.inProp _ _)
      | free-id y=z , free-id x=y, free-comp {m} m->x f' => pmap (\lam x => free-comp x f') (transport_*> (arr m) _ _ _ )
      | free-id y=z, free-comp m->y g', f => idp
      | free-comp m->z h', g, f => pmap (free-comp m->z) concat-assoc
    }

    \record FreeCatFunctor {X : \Set} (arr : X -> X -> \Set) (Y : Precat) {
      \field ob' (a : X) : Y
      \field morph {a b : X} (f :  arr a b): ob' a ->> ob' b

      \func mapId {a b : X} (p : a = b) (i : I) : ob' a ->> ob' (p @ i) =>
        coe (\lam j => ob' a ->> ob' (p @ j)) (id _) i

      \func mapfree {a b : X} (f : Free arr a b) : ob' a ->> ob' b \elim f
        | free-id a=b => mapId a=b right
        | free-comp {m} m->b f' => morph m->b `o` mapfree f'

      \lemma compFree {a b c : X} (f : Free arr b c) (g : Free arr a b) :
        mapfree f `o` mapfree g = mapfree (concat f g) \elim f, g
        | free-id b=c, free-id a=b =>
          \let | u => id-left
               | pb => pathInProp (\lam i => a = b=c @ i) a=b (a=b *> b=c)
          \in coe (\lam i => mapId b=c i `o` mapId a=b right = mapId (pb @ i) right) u right
        | free-id b=c, free-comp {m} m->b g' =>
          \let  p1 => coe (\lam i => mapId b=c i `o` morph m->b = morph (coe (\lam j => arr m (b=c @ j)) m->b i) )
              id-left right
          \in inv o-assoc *> pmap (\lam x => x `o` mapfree g') p1
        | free-comp {m} m->c f' , g => o-assoc *> pmap (o (morph m->c)) (compFree f' g)

      \lemma compCone (tip : Y) (edge : \Pi (x : X) -> tip ->> ob' x)
                      (p : \Pi {x y : X} (a : arr x y) -> morph a `o` edge x = edge y)
                      {x y : X} (f : Free arr x y)
        :  mapfree f `o` edge x = edge y \elim f
        | free-id x=y => coe (\lam i => mapId x=y i `o` edge x = edge (x=y @ i)) id-left right
        | free-comp {m} my f' => o-assoc *> pmap (o (morph my)) (compCone tip edge p f') *> p my

      \use \coerce toFunctor  : Functor (freeCat arr) Y \cowith
        | ob => ob'
        | map =>  FreeCatFunctor.mapfree
        | functor_id f => idp
        | func_comp => FreeCatFunctor.compFree
    }

    \func functor {A : \Set} {C : Precat} (arr : A -> A -> \Set)
                  (obj : A -> C) (map : \Pi {a b : A} (arr a b) -> obj a ->> obj b)
      : Functor (freeCat {A} arr) C =>
      FreeCatFunctor.toFunctor {\new FreeCatFunctor {A} arr C obj map }

    \lemma univalence {A : \Set} (arr : A -> A -> \Set)  {x y : A} (f : Free arr x y) (g : Free arr y x)
                      (p :  g concat f = free-id idp) (q :  f concat g = free-id idp)
      : \Sigma (p : x = y) (transport (Free arr x) p (free-id idp) = f) \elim f
      | free-id eq => univalence-eq arr eq g p q
      | free-comp f g => contradiction

    \lemma univalence-eq {A : \Set} (arr : A -> A -> \Set)  {x y : A} (fe : x = y)(g : Free arr y x)
                         (p : concat g  (free-id fe) = free-id idp) (q : concat (free-id fe)  g = free-id idp)
      : \Sigma (p : x = y) (transport (Free arr x) p (free-id idp) = free-id fe) \elim fe
      | idp => (idp, idp)
  }

\func freeCat {A : \Set} (arr : A -> A -> \Set) : Cat A \cowith
  | Hom => Free arr
  | id _ => free-id idp
  | o => Free.concat
  | id-right => Free.concat-id-left
  | id-left => Free.concat-id-right
  | o-assoc => Free.concat-assoc
  | univalence (fg : Iso) => Free.univalence arr fg.f fg.inv fg.inv_f fg.f_inv

\open Free \hiding (univalence)

\record Pres (A : \Set) {
  | arr : A -> A -> \Set
  | R : \Set
  | src : R -> A
  | tgt : R -> A
  | left-eq (e : R) : Free arr (src e) (tgt e)
  | right-eq (e : R) : Free arr (src e) (tgt e)

  \truncated \data PHom (x y : A) : \Set
    | chain (Free arr x y)
    | quot (e : R)  (p : Free arr x (src e)) (q : Free arr (tgt e) y) (i : I) \elim i {
      | left => chain (q concat left-eq e concat p)
      | right => chain (q concat right-eq e concat p)
    }

  \lemma pconcat-r {e : R} {x y z : A} (f : Free arr y z) (q : Free arr (tgt e) y) (p : Free arr x (src e)) :
    chain (f o: q o: (left-eq e) o: p) = chain (f o: q o: (right-eq e) o: p) =>
    pmap chain (inv concat-assoc) *> path (\lam i => quot e p (f o: q) i)  *> pmap chain (concat-assoc)

  \lemma pconcat-l {e : R} {x y z : A} (f : Free arr x y) (q : Free arr (tgt e) z) (p : Free arr y (src e)) :
    chain ((q o: (left-eq e) o: p) o: f) = chain ((q o: (right-eq e) o: p) o: f) =>
    pmap chain (concat-assoc *> pmap (concat q) (concat-assoc)) *>
    path (\lam i => quot e (p o: f) q i)  *>
    pmap chain (pmap (concat q) (inv concat-assoc) *> inv concat-assoc)

  \func pconcat {x y z : A} (f : PHom y z) (g : PHom x y) : PHom x z
    | chain f, chain g => chain (f concat g)
    | chain f, quot e p q i => pconcat-r f q p @ i
    | quot e p q i, chain f => pconcat-l f q p @ i

  \lemma pconcat-id-left {x y : A} (f : PHom x y) : pconcat f (chain (free-id idp)) = f
    | chain f => pmap chain concat-id-left

  \lemma pconcat-id-right {x y : A} (f : PHom x y) : pconcat (chain (free-id idp)) f = f
    | chain f => pmap chain concat-id-right

  \lemma pconcat-assoc {x y z w : A} {f : PHom x y} {g : PHom y z} {h : PHom z w}  :  pconcat (pconcat h g) f = pconcat h (pconcat g f) \elim f, g, h
    | chain f, chain g, chain h => pmap chain $ concat-assoc

  \func presentedCat : Precat A \cowith
    | Hom => PHom
    | id x => chain (free-id idp)
    | o f g => pconcat f g
    | id-right => pconcat-id-left _
    | id-left => pconcat-id-right _
    | o-assoc => pconcat-assoc
}



