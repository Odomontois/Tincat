\import Cat
\import Category
\import Functor
\import Paths

\instance precatProduct (A B : Precat) : Precat (\Sigma A B)
  | Hom a b => \Sigma (Hom a.1 b.1) (Hom a.2 b.2)
  | id x => (id x.1, id x.2)
  | o f g => (f.1 `o` g.1, f.2 `o` g.2)
  | id-left f => path (\lam i => (id-left f.1 @ i, id-left f.2 @ i))
  | id-right f => path (\lam i => (id-right f.1 @ i, id-right f.2 @ i))
  | o-assoc f g h => path (\lam i => (o-assoc f.1 g.1 h.1 @ i, o-assoc f.2 g.2 h.2 @ i))

\func Bifunctor (A B C D : Precat) => Functor (precatProduct A B) (precatProduct C D)

\instance catProduct (A B : Cat) : Cat (\Sigma A B) =>
\let pab : Precat (\Sigma  A B) =>  precatProduct A B
\in \new Cat {
  | Hom => pab.Hom
  | id => pab.id
  | o => pab.o
  | id-left => pab.id-left
  | id-right => pab.id-right
  | o-assoc => pab.o-assoc
  | univalence {x} {y} f g p q =>
    \let | (u1, t1) => A.univalence f.1 g.1 (pmap (\lam x => x.1) p ) (pmap (\lam x => x.1) q)
         | (u2, t2) => B.univalence f.2 g.2 (pmap (\lam x => x.2) p ) (pmap (\lam x => x.2) q)
         | u => path (\lam i => (u1 @ i, u2 @ i))
         | t => path (\lam i => (t1 @ i, t2 @ i))
    \in univ f.1 f.2 g.1 g.2 (pmap (\lam x => x.1) p ) (pmap (\lam x => x.2) p) (pmap (\lam x => x.1) q ) (pmap (\lam x => x.2) q)
} \where {
  \func fst {A B : \Type} (x : \Sigma A B) : A => x.1

  \func snd {A B : \Type} (x : \Sigma A B) : B => x.2

  \func univ {A B : Cat} {x1 y1 : A} {x2 y2 : B}
             (f1 : x1 ->> y1) (f2 : x2 ->> y2)
             (g1 : y1 ->> x1) (g2 : y2 ->> x2)
             (p1 : g1 `o` f1 = id _) (p2 : g2 `o` f2 = id _)
             (q1 : f1 `o` g1 = id _) (q2 : f2 `o` g2 = id _) :
    \Sigma (p : (x1, x2) = (y1, y2))
           (transport (\lam (o : \Sigma A B) => \Sigma (x1 ->> o.1)(x2 ->> o.2)) p (id x1, id x2) = (f1, f2)) =>
    \let | (u1, t1) => A.univalence f1 g1 p1 q1
         | (u2 ,t2) => B.univalence f2 g2 p2 q2
         | u => path (\lam i => (u1 @ i, u2 @ i))
         | t => path (\lam i => (t1 @ i, t2 @ i))
         | ct => coe_sigma { \lam i => x1 ->> u1 @ i }(\lam i _ => x2 ->> u2 @ i)  (id x1, id x2) right
    \in (u, ct  *> t)
}