\import lib.Paths

\class Scala[_] (F : \Type -> \Type )

\class ScalaFunctor  (map : \Pi {A B : \Type} -> F A -> (A -> B)  -> F B)
                     (identity : \Pi { A : \Type } (fa : F A) -> map fa (\lam x => x) = fa)
                     (composition : \Pi { A B C : \Type } (fa : F A) (f : A -> B) (g : B -> C) -> map fa (\lam x => g (f x)) = map (map fa f) g) \extends Scala[_]


\class ScalaMonadProto  (pure : \Pi {A : \Type } -> A -> F A)
                        (flatMap : \Pi {A B : \Type } -> F (A) -> (A -> F B) -> F B)
                        (left_unit : \Pi { A B : \Type } (a : A) (f : A -> F B) -> flatMap (pure a) f = f a)
                        (right_unit : \Pi { A : \Type } (fa : F A) -> flatMap fa pure = fa)
                        (associativity : \Pi { A B C : \Type} (fa : F A) (f : A -> F B) (g : B -> F C) ->
                                    flatMap fa (\lam x => flatMap (f x) g) = flatMap ( flatMap fa f ) g ) \extends Scala[_]
\class ScalaMonad \extends ScalaMonadProto , ScalaFunctor {
   | map fa f => flatMap  fa (\lam x => pure (f x))
   | identity => right_unit
   | composition {A} {B} {C}  fa f g =>
   \let | gp x => pure (g x)
         | lu_extended => funExt {B} (\lam _ => F C)  (\lam b => gp b) (\lam b => flatMap (pure b) gp) (\lam b => inv ( left_unit b gp))
   \in pmap (\lam u => flatMap fa (\lam x => u (f x))) lu_extended *>   associativity fa (\lam x => pure (f x)) gp
}


