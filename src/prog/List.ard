\import lib.Paths
\import prog.Monoid

\data List (A : \Type)
  | nil
  | \infix 6 :: (a : A) (tail : List A) \where {
    \func length {A : \Type } (l : List A) : Nat
        | nil => Nat.zero
        | :: _ t => suc (length t)

    \func \infixr 5 ++ {A : \Type} (l1 : List A) (l2 : List A) : List A
        | nil, l => l
        | (:: h t), l => h :: (t ++ l)

    \func ++nil {A : \Type} (l : List A): l ++ nil = l
        | nil => idp
        | (:: h t) => pmap (:: h) (++nil t)

    \func assoc {A : \Type} (la lb lc : List A) : (la ++ lb) ++ lc = la ++ (lb ++ lc)  \elim la
        | nil => idp
        | (:: h la') => pmap (:: h) (assoc la' lb lc)

  }

\instance listMonoid {A : \Type}: Monoid (List A)
    | empty => nil
    | combine => List.++
    | left_unit a => idp
    | right_unit => List.++nil
    | associativity  => List.assoc

