\import Set
\import lib.Paths
\import prog.List
\import prog.Monoid
\import prog.funs


\class Scala[_] (T : \Type ) (F : \Type -> \Type )

\class Functor  (map : \Pi {A B : \Type} -> F A -> (A -> B)  -> F B)
                     (identity : \Pi { A : \Type } (fa : F A) -> map fa (\lam x => x) = fa)
                     (composition : \Pi { A B C : \Type } (fa : F A) (f : A -> B) (g : B -> C) -> map fa (g ~ f) = map (map fa f) g) \extends Scala[_]


\class Monad'  (pure : \Pi {A : \Type } -> A -> F A)
                        (flatMap : \Pi {A B : \Type } -> F (A) -> (A -> F B) -> F B)
                        (left_unit : \Pi { A B : \Type } (a : A) (f : A -> F B) -> flatMap (pure a) f = f a)
                        (right_unit : \Pi { A : \Type } (fa : F A) -> flatMap fa pure = fa)
                        (associativity : \Pi { A B C : \Type} (fa : F A) (f : A -> F B) (g : B -> F C) ->
                                    flatMap fa (\lam x => flatMap (f x) g) = flatMap ( flatMap fa f ) g ) \extends Scala[_]

\class Monad \extends Monad' , Functor {
   | map fa f => flatMap  fa (\lam x => pure (f x))
   | identity => right_unit
   | composition {_} {_} {C}  fa f g =>
   \let | gp x => pure (g x)
        | lu_extended => funExt (\lam _ => F C) gp (\lam b => flatMap (pure b) gp) (\lam b => inv ( left_unit b gp))
   \in pmap (\lam u => flatMap fa (u ~ f)) lu_extended *>  associativity fa (pure ~ f) gp
}

\data Identity | Identity
\instance identityMonad : Monad Identity
    | F => id
    | pure x => x
    | flatMap fa f => f fa
    | left_unit _ _ => idp
    | right_unit _ => idp
    | associativity _ _ _ => idp

\data State (S : \Type) | State
\instance stateMonad (S : \Type) : Monad (State S)
    | F a => S -> \Sigma S a
    | pure x s => (s, x)
    | flatMap fa f s => \let sa => fa s \in f sa.2 sa.1
    | left_unit _ _ => idp
    | right_unit _ => idp
    | associativity _ _ _ => idp

\data Reader (R : \Type) | Reader
\instance  readerMonad (R : \Type ) : Monad (Reader R)
    | F a => R -> a
    | pure x a => x
    | flatMap fa f r => f (fa r) r
    | left_unit _ _ => idp
    | right_unit _ => idp
    | associativity _ _ _ => idp

\open Semigroup
\data Writer (w : \Type) | Writer
\instance  writerMonad {W : \Type} {wmon : Monoid W} : Monad (Writer W)
    | F a => \Sigma W a
    | pure x => (wmon.empty, x)
    | flatMap fa f => \let fb => f (fa.2) \in (fa.1 |+| fb.1, fb.2)
    | left_unit {_} {B} a f => \let fb => f a \in pairExt (wmon.left_unit fb.1) idp
    | right_unit {A} fa => pairExt (wmon.right_unit fa.1) idp
    | associativity {_} {_} {C} fa f g => \let | fb => f fa.2 | fc => g fb.2
                                          \in pairExt (inv (wmon.associativity fa.1 fb.1 fc.1)) idp


\data ReaderT (X R : \Type ) | ReaderT
\instance readerTMonad {X r : \Type} {XM : Monad X} : Monad (ReaderT X r)
    | F a => r -> XM.F a
    | pure a => const (XM.pure a)
    | flatMap fa f r => XM.flatMap (fa r) (\lam a => f a r)
    | left_unit {_} {B} a f => functExt (\lam r => XM.left_unit a (\lam a => f a r))
    | right_unit {A} fa => functExt  (\lam r => XM.right_unit (fa r))
    | associativity {A} {B} {C} fa f g => functExt (\lam r => XM.associativity (fa r) (\lam a => f a r) (\lam b => g b r))

\data StateT (X S : \Type) | StateT
\instance stateTMonad {X s : \Type } {XM : Monad X} : Monad (StateT X s)
  | F a => s -> XM.F (\Sigma s a)
  | pure a s => XM.pure (s, a)
  | flatMap fa f s => XM.flatMap (fa s) (\lam sa => f sa.2 sa.1)
  | left_unit a f => functExt (\lam s => XM.left_unit (s, a) (\lam sa => f sa.2 sa.1))
  | right_unit fa => functExt (\lam s => XM.right_unit (fa s) )
  | associativity fa f g => functExt (\lam s => XM.associativity (fa s) (\lam sa => f sa.2 sa.1) (\lam sb => g sb.2 sb.1) )







