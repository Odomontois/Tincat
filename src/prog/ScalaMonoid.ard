\import lib.Paths

\class Semigroup (T : \Type)
                  (combine : T -> T -> T)
                  (associativity : \Pi (a b c : T) -> combine (combine a b) c = combine a (combine b c))

\class Monoid (empty : T )
               (left_unit : \Pi (a : T) -> combine empty a = a)
               (right_unit : \Pi (a : T) -> combine a empty = a)
               \extends Semigroup

\func natZeroSum (a : Nat) :  0 + a = a
    | zero => idp
    | suc (a') => pmap suc (natZeroSum a')

\open Nat
\instance natMonoid : Monoid Nat
    | combine a b => a + b
    | empty => 0
    | left_unit => natZeroSum
    | right_unit a => idp
    | associativity a b c => {?}

