\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Pointed
\import Category
\import Equiv (QEquiv)
\import Equiv.Univalence (QEquiv-to-=)
\import Functor
\import Paths
\import Function (id \as fid, -o)
\import Set.Category

\record Homo (C : \Type \lp 2) (toSet : C -> \Set) {A B : C} (f : toSet A -> toSet B) (props : \Prop)

\record PointHomo {A B : Pointed} (f : A -> B) {
  \property zero-coh : f A.ide = B.ide
}

\record MonoidHomo \extends PointHomo {
  \override A : Monoid
  \override B : Monoid
  \property plus-coh (x y : A) : f (x * y) = f x * f y
}

\record GroupHomo \extends MonoidHomo {
  \override A : Group
  \override B : Group
  \property inv-coh (a : A) : f (inverse a) = inverse (f a)
} \where {
  \lemma equals' {A B : Group} (f : GroupHomo {A} {B}) {hf : A -> B} (p : f.f = hf) (h : GroupHomo hf) : f = h \elim p
    | idp => idp

  \lemma equals {A B : Group} (f g : GroupHomo {A} {B}) (p : f.f = g.f) : f = g => equals' f p g

  \lemma equ-f {A B : Group} {f g : GroupHomo {A} {B}} (p : f = g) : f.f = g.f =>
    pmap {GroupHomo} (\lam h => GroupHomo.f {h}) p

  \lemma equ-f' {A B : Group} {f g : GroupHomo {A} {B}} (p : f = g) (x : A) : f.f x = g.f x =>
    pmap {GroupHomo} (\lam h => GroupHomo.f {h} x) p

  \lemma ident {A : Group} : GroupHomo (fid {A}) \cowith
    | zero-coh => idp
    | plus-coh x y => idp
    | inv-coh a => idp

  \lemma comp {A B C : Group} {f : A -> B} {g : B -> C} (fh : GroupHomo f) (gh : GroupHomo g) : GroupHomo (-o f g) \cowith
    | zero-coh => pmap g fh.zero-coh *> gh.zero-coh
    | plus-coh x y => pmap g (fh.plus-coh x y) *> gh.plus-coh _ _
    | inv-coh x => pmap g (fh.inv-coh x) *> gh.inv-coh _
}

\open GroupHomo

\instance GRP : Precat Group
  | Hom g1 g2 => GroupHomo {g1} {g2}
  | id x => ident
  | o f g => comp g f
  | id-left => equals _ _ idp
  | id-right => equals _ _ idp
  | o-assoc {X} {_} {_} {Y} {f} {g} {h} => equals (comp (comp h g) f) (comp h (comp g f)) idp
--  | univalence {x} {y} (f : GroupHomo) (g : GroupHomo) p q =>
--    \let kek => SetCat.univalence f.f g.f (path (\lam i => GroupHomo.f {p @ i})) (path (\lam i => GroupHomo.f {q @ i}))
--    \in ({?}, equals _ _ {?})
  \where {
    \func ForgetSet : Functor GRP SetCat \cowith
      | ob x => x
      | map (h : GroupHomo) => h.f
      | functor_id A => idp
      | func_comp f g => idp

    \func groupEq {A B : Group}  (f : A -> B)  (g : GroupHomo f) (gi : Iso {GRP} g) =>
      SetCat.univalence f (GroupHomo.f {gi.inv}) (equ-f gi.f_inv) (equ-f gi.inv_f)

    \func groupEq' {A B : Group}  (f : A -> B)  (g : GroupHomo f) (gi : Iso {GRP} g) : QEquiv f \cowith
      | ret => GroupHomo.f {gi.inv}
      | ret_f => equ-f' gi.f_inv
      | f_sec => equ-f' gi.inv_f

    \func gr-eq {A B : Group} (f : A -> B) (g : GroupHomo f) (gi : Iso {GRP} g) : A = {Group} B =>
          gr-eq''  {A} {B} (QEquiv-to-= (groupEq' f g gi)) g gi

    \func gr-eq'' {A B : Group} (p : A = {\Set} B) (g : GroupHomo (transport (\lam t => t) p)) (gi : Iso {GRP} g) : A = {Group} B =>
      Jl (\lam A' p => \Pi (AG : Group A') (h : GroupHomo {A} {AG} (transport (\lam t => t) p )) (hi : Iso {GRP} h) -> A = {Group} AG )
         (\lam AG h hi => gr-eq' A AG hi)
         p B g gi

    \func gr-eq' {A : \Set} (G1 G2 : Group A) {g : GroupHomo {G1} {G2} fid} (gi : Iso {GRP} g) : G1 = {Group} G2 =>
      path (\lam i => \new Group A {
        | ide => g.zero-coh @ i
        | * x y => g.plus-coh x y @ i
        | ide-left x => coe (\lam i => (g.plus-coh (g.zero-coh @ i) x @ i) = x) (G1.ide-left x) i
        | ide-right x => coe (\lam i => g.plus-coh x (g.zero-coh @ i) @ i = x) (G1.ide-right x) i
        | *-assoc x y z => coe (\lam i => g.plus-coh (g.plus-coh x y @ i) z @ i = g.plus-coh x (g.plus-coh y z @ i) @ i) (G1.*-assoc x y z) i
        | inverse x => g.inv-coh x @ i
        | inverse-left x => coe (\lam i => g.plus-coh (g.inv-coh x @ i) x @ i = g.zero-coh @ i) (G1.inverse-left x) i
        | inverse-right x => coe(\lam i => g.plus-coh x (g.inv-coh x @ i) @ i = g.zero-coh @ i) (G1.inverse-right x) i
      })
  }

