\import Cat
\import Functor
\import NatTrans (~>, NatTrans, constTrans2)
\import Unique
\open Functor (Const)

\record UnInit
{C D : PreCat} (x : D.Ob) (F : Functor C D)
(y : C.Ob)
(m : D.Hom x (F.ob y))
(divide : \Pi (z : C.Ob) (n : D.Hom x (F.ob z)) -> Unique (C.Hom y z) (\lam f => D.comp (F.map f) m = n ))

\record UnTerm
{C D : PreCat} (x : D.Ob) (F : Functor C D)
(y : C.Ob)
(m : D.Hom (F.ob y) x)
(divide : \Pi (z : C.Ob) (n : D.Hom (F.ob z) x) -> Unique (C.Hom z y) (\lam f => D.comp m (F.map f) = n ))

\record Limit {C : PreCat} {I : PreCat}
         (F : Functor I C)
         (object : C.Ob)
         (cone : Const object ~> F)
         (universal : \Pi (o : C.Ob) (c : Const o ~> F) -> Unique (o ->> {C} object) (\lam arr => NatTrans.comp cone (constTrans2 arr) = c ))

\func coLimit {C : PreCat} {I : PreCat} (F : Functor I C) (object : C.Ob) (cocone : F ~> Const object) (universal :
    \Pi (o : C.Ob) (c : F ~> Const o) -> Unique (object ->> {C} o) (\lam arr => NatTrans.comp (constTrans2 arr) cocone = c)) =>
    Limit {~ C} {~ I} (Functor.fop F) object {?} {?}
