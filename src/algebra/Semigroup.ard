\import Cat
\import SetCat
\import lib.HLevel


\record Semigroup (op : S -> S -> S)
                  (assoc : \Pi (x y z : S) -> op (op x y) z = op x (op y z)) \extends Set
  \where {
    \func \infixr 5 |+| {A : Semigroup} (x y : A.S) => A.op x y

    \record Homo {A B : Semigroup}
                 (h : A.S -> B.S)
                 (equ : \Pi (x y : A.S) -> h (x |+| {A} y) = h x |+| {B} h y)

    \func equiv {A B : Semigroup} (f g : Homo {A} {B})(e : f.h = g.h) : f = g =>
      \let | f' : Homo {A} {B} f.h => \new Homo f.h f.equ
           | g' : Homo {A} {B} g.h => \new Homo g.h g.equ
           | eqq (i : I) => \Pi (x : Homo {A} {B} f.h) (y : Homo {A} {B} (e @ i)) -> x = {Homo {A} {B}} y \in
      coe eqq (\lam (h1 h2 : Homo {A} {B} f.h) =>
        path (\lam i => \new Homo f.h (\lam x y =>
          ((B.is_set (f.h (x |+| {A} y)) (f.h x |+| {B} f.h y)) (h1.equ x y) (h2.equ x y)) @ i)
        )
      ) right f' g'
  }

\func setBasedCategory (Ob : \Type)
                       (set : \Pi Ob -> Set)
                       (Hom : Ob -> Ob -> \Set)
                       (homo : \Pi {A B : Ob} -> Hom A B -> (Set.S {set A} -> Set.S {set B}))
                       (hom_isSet : \Pi {a b : Ob} -> isSet (Hom a b))
                       (id : \Pi {A : Ob} -> Hom A A)
                       (id_e : \Pi (A : Ob) -> homo (id {A}) = Set.id (Set.S {set A}))
                       (comp : \Pi {a b c : Ob} -> Hom b c -> Hom a b -> Hom a c )
                       (comp_e : \Pi {a b c : Ob} (f : Hom b c) (g : Hom a b) -> homo (comp f g) = Set.comp (homo f) (homo g))
                       (equiv : \Pi {A B : Ob} (f g : Hom A B) (e : homo f = homo g) -> f = g) : Cat {Ob} Hom hom_isSet id comp
  \cowith {
    | l_unit => {?}
    | r_unit => {?}
    | assoc => {?}
    }
