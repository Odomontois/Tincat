\import Cat
\import Set
\import SetCat
\import lib.Equiv
\import lib.HLevel
\import lib.Paths

\record Semigroup (op : S -> S -> S)
                  (assoc : \Pi (x y z : S) -> op (op x y) z = op x (op y z)) \extends Set
  \where {
    \func \infixr 5 |+| {A : Semigroup} (x y : A.S) => A.op x y

    \record Homo {A B : Semigroup}
                 (h : A.S -> B.S)
                 (equ : \Pi (x y : A.S) -> h (x |+| {A} y) = h x |+| {B} h y)

    \func equiv {A B : Semigroup} (f g : Homo {A} {B})(e : f.h = g.h) : f = g =>
      \let | f' : Homo {A} {B} f.h => \new Homo f.h f.equ
           | g' : Homo {A} {B} g.h => \new Homo g.h g.equ
           | eqq (i : I) => \Pi (x : Homo {A} {B} f.h) (y : Homo {A} {B} (e @ i)) -> x = {Homo {A} {B}} y \in
      coe eqq (\lam (h1 h2 : Homo {A} {B} f.h) =>
        path (\lam i => \new Homo f.h (\lam x y =>
          ((B.is_set (f.h (x |+| {A} y)) (f.h x |+| {B} f.h y)) (h1.equ x y) (h2.equ x y)) @ i)
        )
      ) right f' g'

    \func id {A : Semigroup} : Homo {A} {A} \cowith {
      | h => Set.id
      | equ => \lam _ _ => idp
      }

    \func comp {A B C : Semigroup} (f : Homo {B} {C}) (g : Homo {A} {B}) : Homo {A} {C} \cowith {
      | h => Set.comp f.h g.h
      | equ => \lam x y =>
        pmap (\lam k => f.h k) (g.equ x y) *> f.equ (g.h x) (g.h y)
      }

    \func homo_isSet (A B : Semigroup) : isSet (Homo {A} {B}) =>
      \let | struct => \lam (f : A.S -> B.S) => \lam (x y : A.S) => f (x |+| {A} y) = f x |+| {B} f y
           | structT => \lam (f : A.S -> B.S) => \Pi (x y : A.S) -> struct f x y
           | homoSigma => \Sigma (h : A.S -> B.S) (structT h)
           | structSet : \Pi (f : A.S -> B.S) -> \Pi (x y : A.S) -> isSet (struct f x y) =>
             \lam f => (\lam x y => isProp=>isSet (f (x |+| {A} y) = f x |+| {B} f y) (B.is_set (f (x |+| {A} y)) (f x |+| {B} f y)))
           | structTSet : \Pi (f : A.S -> B.S) -> isSet (structT f) =>
             \lam f => piSet {A.S} (\lam x => \Pi (y : A.S) -> struct f x y) (\lam x =>
               piSet {A.S} (\lam y => struct f x y) (\lam y => structSet f x y)
             )
           | homoSigma_isSet => sigmaSet {A.S -> B.S} {structT} (Set.hom_set A B) (structTSet)
           | sect => \new Section {
             | A => Homo {A} {B}
             | B => homoSigma
             | f (x : Homo {A} {B}) => (x.h, x.equ)
             | ret b => \new Homo {A} {B} b.1 b.2
             | ret_f => qed
             }
      \in retractsSet sect homoSigma_isSet
  }

\module SemigroupCategory \where {
  \open Semigroup

  \func SemigroupCat : Cat {Semigroup} =>
      setBasedCategory Semigroup
                       (\lam x => x)
                       (\lam A B => Homo {A} {B})
                       (\lam {A} {B} (f : Homo {A} {B}) => f.h)
                       (\lam {A} {B} => homo_isSet A B)
                       id
                       (\lam {_} => idp)
                       (\lam f g => comp f g)
                       (\lam _ _ => idp)
                       (\lam f g eq => equiv f g eq)
}
