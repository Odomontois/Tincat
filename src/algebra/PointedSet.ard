\import Cat
\import Product (Product2)
\import Set
\import SetCat
\import Terminal
\import Unique
\import lib.Data.Unit
\import lib.Equiv
\import lib.HLevel
\import lib.Paths

\record Pointed (base : S)
  \extends Set
  \where {
    \record Homo {A B : Pointed}
                 (h : A.S -> B.S)
                 (equ : h A.base = B.base)

    \func id {A : Pointed} : Homo {A} {A} \cowith {
      | h => Set.id
      | equ => idp
      }

    \func comp {A B C : Pointed} (f : Homo {B} {C}) (g : Homo {A} {B}) : Homo {A} {C} \cowith {
      | h => Set.comp f.h g.h
      | equ => pmap f.h g.equ *> f.equ
      }

    \func equiv {A B : Pointed}(f g : Homo {A} {B})(e : f.h = g.h) : f = g =>
      \let | f' : Homo {A} {B} f.h => \new Homo f.h f.equ
           | g' : Homo {A} {B} g.h => \new Homo g.h g.equ
           | eqq (i : I) => \Pi (x : Homo {A} {B} f.h) (y : Homo {A} {B} (e @ i)) -> x = {Homo {A} {B}} y \in
      coe eqq (\lam (x y : Homo {A} {B} f.h) => path (\lam i => \new Homo f.h (((B.is_set (f.h A.base) B.base) x.equ y.equ) @ i))) right f' g'

    \func equivElim {A B : Pointed}{f g : Homo {A} {B}}(e : f = g) : f.h = g.h =>
      pmap {Homo {A} {B}} {A.S -> B.S} (\lam (x : Homo {A} {B}) => x.h) e

    \func zero => \new Pointed (Unit) (unit_isSet) (unit)

    \func homo_isSet (p1 p2 : Pointed) : isSet (Homo {p1} {p2}) =>
      \let | homoSigma => \Sigma (f : p1.S -> p2.S) (f p1.base = p2.base)
           | homoSigma_isSet => sigmaSet {p1.S -> p2.S} {\lam f => f p1.base = p2.base} (Set.hom_set p1 p2)
                                         (\lam f => isProp=>isSet (f p1.base = p2.base) (p2.is_set (f p1.base) p2.base))
           | sect => \new Section {
             | A => Homo {p1} {p2}
             | B => homoSigma
             | f (x : Homo {p1} {p2}) => (x.h, x.equ)
             | ret b => \new Homo {p1} {p2} {
               | h => b.1
               | equ => b.2
               }
             | ret_f => qed
           }
      \in HLevel_-2+1=>HLevel_-1 (Homo {p1} {p2}) 1
            (HLevel-retracts sect {2} ((HLevel_-1=>HLevel_-2+1 homoSigma 1 homoSigma_isSet)))

    \func product (A B : Pointed) : Pointed \cowith {
      | S => \Sigma (x : A.S) (y : B.S)
      | is_set => product_isSet A B
      | base => (A.base, B.base)
    }
  }

\module PointedSetCategory \where {
  \open Pointed

  \func PSet : Cat {Pointed} =>
    setBasedCategory Pointed
                     (\lam x => x)
                     (\lam A B => Homo {A} {B})
                     (\lam {A} {B} (f : Homo {A} {B}) => f.h)
                     (\lam {A} {B} => homo_isSet A B)
                     id
                     (\lam {A} => idp)
                     (\lam f g => comp f g)
                     (\lam f g => idp)
                     (\lam f g eq => equiv f g eq)

  \func terminal : Terminal {PSet} zero \cowith {
    | terminal P => \new Singleton {
      | T => P ->> {PSet} zero
      | t => \new Homo {P} {zero} {
        | h x => unit
        | equ => idp
        }
      | prop (m1 m2 : Homo {P} {zero}) =>
        equiv m1 m2 (functExt (\lam x => unit_isProp (m1.h x) (m2.h x)))
      }
    }

  \func initial : Initial {PSet} zero \cowith {
    | initial (P : Pointed) => \new Singleton {
      | T => zero ->> {PSet} P
      | t => \new Homo {zero} {P} {
        | h x => P.base
        | equ => idp
        }
      | prop (m1 m2 : Homo {zero} {P}) =>
         equiv m1 m2 (functExt (\lam (x : Unit) => m1.equ *> (inv m2.equ)))
      }
    }

  \func caretsian_product (A B : Pointed) : Product2 {PSet} A B =>
    \let | A*B : Pointed => product A B
         | p1 : Homo {A*B} {A} => \new Homo {A*B} {A} {
           | h x => x.1
           | equ => idp
         }
         | p2 : Homo {A*B} {B} => \new Homo {A*B} {B} {
           | h x => x.2
           | equ => idp
         } \in
    \new Product2 {PSet} A B A*B p1 p2 {
      | prod (C : Pointed) (q1 : Homo {C} {A}) (q2 : Homo {C} {B}) =>
        \let m : Homo {C} {A*B}  => \new Homo {C} {A*B} {
          | h => (\lam x => (q1.h x, q2.h x))
          | equ => SigmaExt {A.S} (\lam _ => B.S) (q1.h C.base, q2.h C.base) (A.base, B.base) q1.equ q2.equ
        } \in
        \new Unique (C ->> {PSet} A*B) (\lam m => \Sigma (p1 cmp {PSet} m = q1) (p2 cmp {PSet} m = q2)) {
          | elem => m
          | prop =>
            \let | p1_m => p1 cmp {PSet} m
                 | p2_m => p2 cmp {PSet} m \in
            (equiv p1_m q1 (functExt (\lam x => qed (q1.h x))),
             equiv p2_m q2 (functExt (\lam x => qed (q2.h x))))
          | unique (f : Homo {C} {A*B}) s =>
            equiv m f (functExt (\lam x =>
              \let | fx => f.h x
                   | fst : fx.1 = q1.h x => (functExtElim (equivElim s.1)) x
                   | snd : fx.2 = q2.h x => (functExtElim (equivElim s.2)) x \in
              inv (pmap2 (\lam u => \lam w => (u, w)) fst snd)
            ))
          }
      }
  }
