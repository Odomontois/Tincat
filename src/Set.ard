\import lib.HLevel
\import lib.Paths


\func pairSet {A B : \Type} (p1 : isSet A) (p2 : isSet B) : isSet (\Sigma A B) =>
    HLevel_-2+1=>HLevel_-1 (\Sigma A B) 1
         (HLevels-sigma {A} (\lam _ => B) {2} (HLevel_-1=>HLevel_-2+1 A 1 p1) (\lam _ => HLevel_-1=>HLevel_-2+1 B 1 p2))

\func propPath {A B : \Type } (p : A = B) : \Type =>
    \Pi (a : A) (b : B) -> Path (\lam i => p @ i) a b

\func propId {A : \Type} (set : isProp A) : propPath {A} {A} idp => \lam (a a' : A) => set a a'

\data bool
  | true
  | false



\func set_equalities_are_equal
    {A : \Type}
    (B : A -> \Type)
    (b_set : \Pi (a : A) -> isSet (B a))
    (b b' : \Pi (a : A) -> B a)
    (a a' : A)
    (aeq : a = a')
    (beq1 : b a = b' a)
    (beq2 : b a' = b' a') :
    Path (\lam i => \let ai => aeq @ i \in b ai = b' ai ) beq1 beq2 =>
        path ( \lam i =>
             \let | ai => aeq @ i
                  | b_eq_prop => b_set (aeq @ i) (b ai) (b' ai)
                  | b_eq (i : I) => b ( aeq @ i ) = b' ( aeq @ i)
                  | b_eq' (i : I) => b ( inv aeq @ i) = b' (inv aeq @ i)
                  | b_l => coe b_eq beq1 i
                  | b_r => coe b_eq' beq2 i
              \in {?}  )

