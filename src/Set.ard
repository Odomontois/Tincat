\import lib.HLevel
\import lib.Paths


\func pairSet {A B : \Type} (p1 : isSet A) (p2 : isSet B) : isSet (\Sigma A B) =>
    HLevel_-2+1=>HLevel_-1 (\Sigma A B) 1
         (HLevels-sigma {A} (\lam _ => B) {2} (HLevel_-1=>HLevel_-2+1 A 1 p1) (\lam _ => HLevel_-1=>HLevel_-2+1 B 1 p2))

\func depPairSet {A : \Type}
                 (B : A -> \Type)
                 (p1 : isSet A)
                 (p2 : \Pi (a : A) -> isSet (B a)) : isSet (\Sigma (a : A) (B a)) => {?}

\func propPath {A B : \Type } (p : A = B) : \Type =>
    \Pi (a : A) (b : B) -> Path (\lam i => p @ i) a b

\func propId {A : \Type} (set : isProp A) : propPath {A} {A} idp => \lam (a a' : A) => set a a'

\data bool
  | true
  | false

\func set_equalities_are_equal
    {A : \Type}
    (B : A -> \Type)
    (b_set : \Pi (a : A) -> isSet (B a))
    (b b' : \Pi (a : A) -> B a)
    (a a' : A)
    (aeq : a = a')
    (beq1 : b a = b' a)
    (beq2 : b a' = b' a') :
    transport (\lam aa => b aa = b' aa ) aeq beq1 = beq2 =>
       b_set a' (b a') (b' a') (transport (\lam aa => (b aa = b' aa)) aeq beq1) beq2
