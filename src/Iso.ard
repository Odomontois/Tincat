\import Cat
\import Util
\import Paths
\import Category
\open Precat

\record Iso1 {C : Precat} {a b : C} (f : a ->> b){
  | rev : b ->> a
  \property l_comp : rev `o` f = id a
  \property r_comp : f `o` rev = id b
} \where {
  \lemma unique-rev {C : Precat} {a b : C} {f : a ->> b}
                    (iso1 : Iso1 f)
                    (iso2 : Iso1 f) : iso1.rev = iso2.rev =>
    inv ( id-left iso1.rev) *> pmap (o iso1.rev) (inv iso2.r_comp) *> o-assoc _ _ _ *>
                                                                      pmap (flip o iso2.rev) iso1.l_comp *> id-right _

  \use \level iso-is-prop {C : Precat} {a b : C} {f : a ->> b}
                          (iso1 : Iso1 f)
                          (iso2 : Iso1 f) : iso1 = iso2 =>
    \let | eq => unique-rev iso1 iso2
         | lp => pathInProp (\lam i => eq @ i `o` f = id _) iso1.l_comp iso2.l_comp
         | rp => pathInProp (\lam i => f `o` eq @ i = id _) iso1.r_comp iso2.r_comp
    \in path (\lam i => \new Iso1 f {
      | rev => eq @ i
      | l_comp =>  lp @ i
      | r_comp =>  rp @ i
    })

  \lemma refl {C : Precat} (a : C) : Iso1 (id a) =>
    \new Iso1 (id a) (id a) (id-left (id a)) (id-right (id a))

  \lemma sym {C : Precat} {a b : C} {f : a ->> b}
             (i : Iso1 f) : Iso1 i.rev =>
    \new Iso1 i.rev f i.r_comp i.l_comp

  \lemma trans {C : Precat} {a b c : C} {f : a ->> b} { g : b ->> c} (i : Iso1 f) (j : Iso1 g) : Iso1 (g `o` f) \cowith
    | rev => i.rev `o` j.rev
    | l_comp => inv (o-assoc _ _ _) *>
    pmap (o i.rev) (o-assoc _ _ _ *> pmap (\lam x => x `o` i.f) j.l_comp *> id-right _) *> i.l_comp
    | r_comp => inv (o-assoc _ _ _ ) *>
    pmap (o j.f) (o-assoc _ _ _ *> pmap (\lam x => x `o` j.rev) i.r_comp *> id-right _) *> j.r_comp

  \use \coerce iso-to-= {C : Cat} {a b : C} (iso : Iso1 {C} {a} {b}) : a = b =>
    (C.univalence iso.f iso.rev iso.l_comp iso.r_comp).1
}

\func \infix 4 ~= {C : Precat} (a b : C) => \Sigma (f : a ->> b) (Iso1 f)

