\import Cat
\import lib.Paths

\record Iso {C : Cat}
            {a : C.Ob}
            {b : C.Ob}
            (f : C.Hom a b)
            (f_op : C.Hom b a)
            (l_comp : C.comp f_op f = C.id)
            (r_comp : C.comp f f_op = C.id)

\func \infix 1 ~= {C : Cat}
                  (a : C.Ob)
                  (b : C.Ob) => Iso {C} {a} {b}

\func iso_refl {C : Cat}
               {a : C.Ob} : a ~= a =>
  \new Iso {C} {a} {a} C.id C.id (C.l_unit C.id) (C.r_unit C.id)

\func iso_sym {C : Cat}
              {a b : C.Ob}
              (i : a ~= {C} b) : b ~= a =>
  \new Iso {C} {b} {a} i.f_op i.f i.r_comp i.l_comp

\func iso_trans {C : Cat}
                {a b c : C.Ob}
                (i : a ~= {C} b)
                (j : b ~= {C} c) : a ~= {C} c =>
  \let r : C.comp (C.comp j.f i.f) (C.comp i.f_op j.f_op) = C.id =>
     C.assoc j.f i.f (C.comp i.f_op j.f_op) *>
     inv (pmap (C.comp j.f) (C.assoc i.f i.f_op j.f_op)) *>
     pmap (C.comp j.f) (pmap (\lam x => C.comp x j.f_op) i.r_comp) *>
     pmap (C.comp j.f) (C.l_unit j.f_op) *>
     j.r_comp \in
  \let l : C.comp (C.comp i.f_op j.f_op) (C.comp j.f i.f) = C.id =>
     C.assoc i.f_op j.f_op (C.comp j.f i.f) *>
     inv (pmap (C.comp i.f_op) (C.assoc j.f_op j.f i.f)) *>
     pmap (C.comp i.f_op) (pmap (\lam x => C.comp x i.f) j.l_comp) *>
     pmap (C.comp i.f_op) (C.l_unit i.f) *> i.l_comp \in
   \new Iso {C} {a} {c} (C.comp j.f i.f) (C.comp i.f_op j.f_op) l r

\func unique_f_op {C : Cat}
                  {a b : C.Ob}
                  {f : C.Hom a b}
                  (iso1 : Iso {C} {a} {b} f)
                  (iso2 : Iso {C} {a} {b} f) : iso1.f_op = iso2.f_op =>
  inv (C.l_unit iso1.f_op) *>
  pmap (\lam x => C.comp x iso1.f_op) (inv iso2.l_comp) *>
  C.assoc iso2.f_op f iso1.f_op *>
  pmap (C.comp iso2.f_op) iso1.r_comp *>
  C.r_unit iso2.f_op
