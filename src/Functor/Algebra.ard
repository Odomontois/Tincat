\import Cat
\import Category
\import Functor
\import HLevel
\import Iso
\import Paths
\import Unique
\import Universal.Terminal
\open Precat
\open Algebra (Homo, =homo)

\record Algebra {C : Precat}(F : Functor C C) {
  | base : C
  | algebra : F.ob base ->> base
} \where {
  \record Homo {C : Precat} {F : Functor C C} (x y : Algebra F){
    | m : x.base ->> y.base
    \property homo : m `o` x.algebra = y.algebra `o` F.map m
  }

  \lemma =homo {C : Precat} {F : Functor C C } {a b : Algebra F} {u v : Homo a b} (p : u.m = v.m) : u = v =>
    path(\lam i => \new Homo a b {
      | m => p @ i
      | homo => pathInProp (\lam i => (p @ i) `o` a.algebra = b.algebra `o` F.map (p @ i)) u.homo v.homo @ i
    })
}

\instance  algebraCat {C : Precat} { F : Functor C C} : Precat (Algebra F) \cowith
  | Hom a b => Homo a b
  | id a => \new Homo a {
    | m => id _
    | homo => id-right _ *> inv (id-left _) *> pmap (o (algebra {a})) (inv (F.functor_id _))
  }
  | o {_} {_} {z : Algebra} (f : Homo) (g : Homo) => \new Homo _ {
    | m => f.m `o` g.m
    | homo =>
      inv (o-assoc _ _ _) *> pmap (o f.m) g.homo *> o-assoc _ _ _ *> (pmap (>> (F.map g.m)) f.homo *>
      inv (o-assoc _ _ _ ) *> pmap (o z.algebra) (F.func_comp _ _))
  }
  | id-left (f : Homo) => =homo (id-left f.m)
  | id-right (f : Homo) => =homo (id-right f.m)
  | o-assoc (f : Homo) (g : Homo) (h : Homo) => =homo (o-assoc f.m g.m h.m)

-- | By Lambek
\lemma initial-fixpoint {C : Precat} {F : Functor C C} (initMu : Initial (algebraCat {C} {F})) : Iso1 (algebra  {initMu.ob}) =>
  \let | mu : Algebra F => initMu.ob
       | mualg : F.ob mu.base ->> mu.base => mu.algebra
       | mapped : Algebra F => \new Algebra F _ (F.map mu.algebra)
       | revhomo : Homo mu mapped => elem {initMu.terminal mapped}
       | rev : mu.base ->> F.ob (mu.base)  => revhomo.m
       | rev*mu=F_mu*rev : rev `o` mualg = F.map (mualg `o` rev)  => revhomo.homo *> F.func_comp _ _
       | mu*rev-homo : Homo mu mu => \new Homo mu mu{
         | m => mualg `o` rev
         | homo => inv (o-assoc _ _ _) *> pmap (o mualg) rev*mu=F_mu*rev
       }
       | idhomo : Homo mu mu => \new Homo mu mu {
         | m => id _
         | homo => id-right _ *> inv (id-left _) *> pmap (o mualg) (inv (F.functor_id _))
       }
       | mumu-single : isProp (Homo mu mu) => singleton {initMu.terminal mu}
       | mu*rev=id  : mualg `o` rev = id _ => pmap (\lam (h : Homo mu mu) => h.m) (mumu-single mu*rev-homo idhomo)
       | rev*mu=id : rev `o` mualg = id _  => rev*mu=F_mu*rev *> pmap F.map mu*rev=id *> F.functor_id _

  \in \new Iso1 mualg rev {
    | l_comp => rev*mu=id
    | r_comp => mu*rev=id
  }
