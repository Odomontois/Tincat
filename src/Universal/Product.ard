\import Cat
\import Equiv (QEquiv)
\import Universal.Limit
\import Iso
\import Data.Bool
\import Unique
\import Paths
\import Data.Three
\import Universal.Terminal
\import Category
\import Data.Three
\open Precat (>>)
\import Equiv.Univalence (=-to-Equiv, QEquiv-to-=)
\import Function (-o)
\import Functor (Functor)
\import Set.Category
\import Data.Or
\import Universal.Universal
\open Functor

\record LargeProduct {X : \Set} (pget : X -> C) \extends Limit {
  | IX => discreteCat X
  | D => discreteFunctor pget

  | pob : C
  | proj (i : X) : pob ->> pget i
  | lprod (x : C) (f : \Pi (i : X) -> x ->> pget i) : Unique (x ->> pob ) (\lam pr => \Pi (j : X) -> proj j `o` pr = f j)

  | tip => pob
  | edge (ix : IX) => proj ix
  | cone {ix1 ix2 : IX} (f : ix1 = ix2) =>
    coe (\lam i => coe(\lam j => pget ix1 ->> pget (f @ j)) (id (pget ix1)) i `o` proj ix1 = proj (f @ i))  (id-right _)  right
  | universal (c : Cone D) =>  lprod c.tip c.edge

  \use \coerce toLimit : Limit (discreteFunctor pget) \cowith
    | tip => tip
    | edge => edge
    | cone => cone
    | universal => universal

} \where {
  \lemma product-unique {C : Precat} {I : \Set} {a : I -> C.Ob} (pr pr' : LargeProduct a) :
    Iso1 (elem {pr'.lprod pr.pob pr.proj}) =>
    Limit.limit-iso (toLimit {pr}) (toLimit {pr'})

  \lemma proj-product-id {C : Precat} (P : LargeProduct {C}) (f : P.pob ->> P.pob ) (eqs : \Pi (i : P.X) -> P.proj i `o` f = P.proj i) : f = id _ =>
    \let | u : Unique => P.lprod P.pob (P.proj)
         | u_eq_id => u.unique (id _) (\lam i => C.id-left (P.proj i))
         | u_eq_f => u.unique f eqs
    \in (inv u_eq_f) *> u_eq_id
}

\record Product2 \extends BaseProduct2, LargeProduct {
  \property prod2 {x : C} (f : x ->> a) (g : x ->> b) : Unique (x ->> p) (\lam pr => \Sigma (pi1 `o`  pr = f) (pi2 `o` pr = g))

  | pob => p
  | X => Bool
  | pget i => \case i \with {| true => a | false => b }
  | proj i => \case i \as k \return pob ->> pget k \with {| true => pi1 | false => pi2 }
  | lprod x f  =>
    \let p2 : Unique => prod2 (f true) (f false)
    \in \new Unique _ _ p2.elem {
      | prop j => \case j \as k \return (proj k `o` p2.elem = f k) \with {| true => p2.prop.1 | false => p2.prop.2}
      | unique q g => p2.unique q (g true, g false)
    }

} \where {
  \func swap {C : Precat} {a b p : C} (pab : Product2 a b p) : Product2 b a p \cowith
    | pi1 => pab.pi2
    | pi2 => pab.pi1
    | prod2 {x} f g =>
      \let f*g : Unique (x ->> p) => pab.prod2 g f
      \in \new Unique f*g.A _ {
        | elem => f*g.elem
        | prop => (f*g.prop.2, f*g.prop.1)
        | unique u pu => f*g.unique u (pu.2, pu.1)
      }

  \lemma swap-involutive {C : Precat} (a b p : C) (pab : Product2 a b p) : swap (swap pab) = pab => idp

  \func product_associativity {C : Precat} {a b c : C}
                              (a*b : Product2 a b)
                              (ab*c : Product2 a*b.p c)
                              (b*c : Product2 b c)
                              (a*bc : Product2 a b*c.p ab*c.p) : ab*c.p ~= ab*c.p =>
    LargeProduct.product-unique  (threeShuffle (threeProduct a*b ab*c)) (threeProduct b*c (swap a*bc))
    \where {
      \func threeProduct {C : Precat} {a b c : C} (a*b : Product2 a b ) (ab*c : Product2 a*b.p c ) :
        LargeProduct {C} {three} (make3X a b c) ab*c.p =>
        \let
          | proj (i : three) => \case i \as i' \return ab*c.p ->> make3X a b c i' \with {
            | t1 => a*b.pi1 `o` ab*c.pi1
            | t2 => a*b.pi2 `o` ab*c.pi1
            | t3 => ab*c.pi2
          }
        \in \new LargeProduct _ _ {
          | proj => proj
          | lprod c f =>
            \let | uab : Unique (c ->> a*b.p) => a*b.prod2 (f t1) (f t2)
                 | uab_c : Unique (c ->> ab*c.p) => ab*c.prod2 uab.elem (f t3)
            \in \new Unique _ _ {
              | elem => uab_c.elem
              | prop i => \case i \as i' \return proj i' `o` uab_c.elem = f i' \with {
                | t1 => inv (o-assoc _ _ _) *> pmap (o a*b.pi1) uab_c.prop.1 *> uab.prop.1
                | t2 => inv (o-assoc _ _ _) *> pmap (o a*b.pi2) uab_c.prop.1 *> uab.prop.2
                | t3 => uab_c.prop.2
              }
              | unique g gu =>
                \let gab => uab.unique (ab*c.pi1 `o` g) (o-assoc _ _ _ *> gu t1, o-assoc _ _ _ *> gu t2)
                \in uab_c.unique g (inv gab, gu t3)
            }
        }

      \func threeShuffle {C : Precat} {a b c p : C} (abc :  LargeProduct (make3X a b c) p)  : LargeProduct  (make3X b c a) p =>
        \let proj t => \case t \as t' \return p ->> make3X b c a t'  \with {
          | t1 => abc.proj t2
          | t2 => abc.proj t3
          | t3 => abc.proj t1
        }
        \in \new LargeProduct _ _ {
          | proj =>  proj
          | lprod v f =>
            \let
              | f' t => \case t \as t' \return v ->> make3X a b c t' \with {
                | t1 => f t3
                | t2 => f t1
                | t3 => f t2
              }
              | u : Unique (v ->> p) => abc.lprod v f'
            \in \new Unique _ _ {
              | elem => u.elem
              | prop t => \case t \as t' \return proj t' `o` u.elem = f t' \with {
                | t1 => u.prop t2
                | t2 => u.prop t3
                | t3 => u.prop t1
              }
              | unique m g => u.unique m ( \lam t => \case t \as t' \return abc.proj t' `o` m = f' t' \with{
                | t1 => g t3
                | t2 => g t1
                | t3 => g t2
              })
            }
        }
    }
}

\func LargeSum {C : Precat} {X : \Set} (pget : X -> C) => LargeProduct  {op C} {X} pget

\func Sum2 {C : Precat} (cp a b : C) => Product2 {op C} cp a b