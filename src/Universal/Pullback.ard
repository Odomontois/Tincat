\import Cat
\import Category
\import Functor
\import Logic
\import Paths
\import Unique
\import Universal.Limit
\import Cat.Free
\open PullbackDiagramm
\open Free (FreeCatFunctor)
\open FreeCatFunctor (mapId, toFunctor)

\record PullbackData {a b c : C} (p : C) (f : a ->> c) (g : b ->> c) \extends BasePrecat{
  | pi1 : p ->> a
  | pi2 : p ->> b

  \property cross : f `o` pi1 = g `o` pi2
  \property pullback {x : C} (xa : x ->> a) (xb : x ->> b) (xc : f `o` xa = g `o` xb) :
  Unique (x ->> p) (\lam pr => \Sigma (pi1 `o` pr = xa) (pi2 `o` pr = xb))

  \func  dob (dx : Obj) : C
    | DA => a
    | DB => b
    | DC => c

  \func dmap {x y : Obj} (f : Arr x y) : dob x ->> dob y \elim x, y, f
    | DA, DC, A->C => f
    | DB, DC, B->C => g


  \func freeFunct => \new FreeCatFunctor Arr C dob dmap
  \func diagramm : Functor (freeCat Arr) C => FreeCatFunctor.toFunctor {freeFunct}

  \func dedge (x : Obj) : p ->> dob x
    | DA => pi1
    | DB => pi2
    | DC => f `o` pi1

  \lemma simpleCone {x y : Obj} (a : Arr x y) : dmap a `o` dedge x = dedge y \elim x, y, a
    | DA, DC, A->C => idp
    | DB, DC, B->C => inv cross


  \lemma dcone {x y : Obj} (f : Free Arr x y) : diagramm.map f `o` dedge x = dedge y =>
    FreeCatFunctor.compCone p dedge simpleCone f

  \lemma duniversal (c' : Cone diagramm) =>
    \let | p1' => c'.edge DA
         | p2' => c'.edge DB
         | f= : f = diagramm.map (Free.embed A->C) => inv (id-left _)
         | g= : diagramm.map (Free.embed B->C) = g => id-left _
         | xc' :  f `o` p1'  = g `o` p2' =>
           pmap (\lam u => o u p1') f= *>
           c'.cone (Free.embed A->C)  *>
           inv (c'.cone (Free.embed B->C)) *>
           pmap (\lam u => o u p2') g=
         | unic : Unique (c'.tip ->> p) => pullback p1' p2' xc'

    \in \new Unique (c'.tip ->> p) (\lam f => \Pi (ix : Obj) ->  dedge ix `o` f = c'.edge ix) {
      | elem => unic.elem
      | prop => {?}
      | unique => {?}
    }
}

\open PullbackData

\record Pullback \extends PullbackData, Limit {
  | tip => p
  | IX => freeCat Arr
  | D => diagramm
  | edge => dedge
  | cone => dcone
}

\module PullbackDiagramm \where{
  \data Obj | DA | DB | DC

  \func discrOb1 (o : Obj) : \Prop
    | DA => \Sigma
    | DB => Empty
    | DC => Empty

  \func discrOb2 (o : Obj) : \Prop
    | DA => Empty
    | DB => \Sigma
    | DC => Empty

  \lemma discrAB (p : DA = DB) : Empty => transport discrOb1 p ()

  \lemma discrAC (p : DA = DC) : Empty => transport discrOb1 p ()

  \lemma discrBC (p : DB = DC) : Empty => transport discrOb2 p ()

  \data Arr (dom cod : Obj) \with
    | DA, DC => A->C
    | DB, DC => B->C
}


