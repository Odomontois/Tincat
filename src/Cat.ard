\import lib.Equiv
\import lib.Paths
\import lib.Data.Unit
\import Prelude

\record Cat {Ob : \Type}
            (Hom : Ob -> Ob -> \Type)
            (id : \Pi {a : Ob} -> Hom a a)
            (comp : \Pi {a b c : Ob} -> Hom b c -> Hom a b -> Hom a c )
            (l_unit : \Pi {a b : Ob} (f : Hom a b) -> comp id f = f )
            (r_unit : \Pi {a b : Ob} (f : Hom a b) -> comp f id = f )
            (assoc : \Pi {a b c d : Ob} (f : Hom c d) (g : Hom b c) (h : Hom a b) -> comp (comp f g) h = comp f (comp g h)  )

\func op (C : Cat) : Cat \cowith
      | Ob => C.Ob
      | Hom a b => C.Hom b a
      | id => C.id
      | comp => \lam {a} {b} {c} f g => C.comp g f
      | l_unit => \lam {a} {b} f => C.r_unit f
      | r_unit => \lam {a} {b} f => C.l_unit f
      | assoc => \lam {a} {b} {c} {d} f g h => inv (C.assoc h g f)

\func \infix 5 <x> (C : Cat) (D : Cat) : Cat =>
    \let | Ob => \Sigma C.Ob D.Ob
         | Hom  (a : Ob) (b : Ob) => \Sigma (C.Hom a.1 b.1) (D.Hom a.2 b.2)
         | id {a : Ob} : Hom a a => (C.id, D.id)
         | comp {a b c : Ob} (f : Hom b c) (g : Hom a b) => (C.comp f.1 g.1, D.comp f.2 g.2)
         | constDHom {a b : Ob} (chom : C.Hom a.1 b.1) => D.Hom a.2 b.2
    \in \new Cat {
        | Ob => Ob | Hom => Hom  | id => id | comp => comp
        | l_unit => \lam {a} {b} f => SigmaExt constDHom (comp id f) f (C.l_unit f.1) (D.l_unit f.2)
        | r_unit => \lam {a} {b} f => SigmaExt constDHom (comp f id) f (C.r_unit f.1) (D.r_unit f.2)
        | assoc => \lam {a} {b} {c} {d} f g h =>
            SigmaExt constDHom (comp (comp f g) h) (comp f (comp g h)) (C.assoc f.1 g.1 h.1) (D.assoc f.2 g.2 h.2)
    }

\func cat1 : Cat \cowith
  | Ob => Unit
  | Hom a b => Unit
  | id => \lam {a} => unit
  | comp f g => unit
  | l_unit f => idp
  | r_unit f => idp
  | assoc f g h => idp

\func cmp {C : Cat} {a b c : C.Ob} (f : C.Hom b c) (g : C.Hom a b) => C.comp f g

\open Cat (comp)

\record Functor {C D : Cat}
                (ob : C.Ob -> D.Ob )
                (map : \Pi {a b : C.Ob} (C.Hom a b) -> D.Hom (ob a) (ob b))
                (k_id : \Pi {a : C.Ob} -> map (C.id {a}) = D.id {ob a} )
                (k_comp : \Pi {a b c : C.Ob} (f : C.Hom b c) (g : C.Hom a b) -> D.comp (map f) (map g) = map (C.comp f g) )

\func id_functor {C : Cat} : Functor \cowith
 | C => C
 | D => C
 | ob x => x
 | map f => f
 | k_id => \lam {a} => idp
 | k_comp => \lam {a} {b} {c} f g => idp

\func cmp_functor {C D E : Cat } (F : Functor {D} {E}) (G : Functor {C} {D}) : Functor \cowith
 | C => C
 | D => E
 | ob x => F.ob (G.ob x)
 | map => \lam {a} {b} f => F.map (G.map f)
 | k_id => {?}
 | k_comp => {?}

\func cmp_functor_1 {C D E : Cat } (F : Functor {D} {E}) (G : Functor {C} {D}) : Functor \cowith
 | C => C
 | D => E
 | ob x => F.ob (G.ob x)
 | map f => F.map (G.map f)
 | k_id => {?}
 | k_comp => {?}





