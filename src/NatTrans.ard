\import Cat
\import Functor
\import lib.Paths


\record NatTrans {C D : Cat} (F G : Functor C D)
                  (trans : \Pi {a : C.Ob} -> F.ob a ->> {D} G.ob a)
                  (naturality : \Pi {a b : C.Ob} (f : a ->> {C} b) -> trans cmp {D} F.map f = G.map f cmp {D} trans )
                  \where  {
                     \func id {C D : Cat} (F : Functor C D) : F ~> F =>
                         \new NatTrans F F  {
                           | trans {a} => D.id
                           | naturality f => \let ff => F.map f \in  D.l_unit ff *> inv (D.r_unit ff)
                           }

                     \func comp {C D : Cat} {F G H : Functor C D} (alpha : G ~> H) (beta : F ~> G) : F ~> H =>
                        \new NatTrans F H {
                            | trans {a} => alpha.trans cmp {D} beta.trans
                            | naturality f =>
                               D.assoc alpha.trans beta.trans (F.map f) *>
                               pmap (D.comp alpha.trans) (beta.naturality f) *>
                               inv (D.assoc alpha.trans (G.map f) beta.trans) *>
                               pmap (\lam h => D.comp h beta.trans) (alpha.naturality f) *>
                               D.assoc (H.map f) alpha.trans beta.trans
                        }

                     \func hcomp {C D E : Cat} {F G : Functor D E} {H K : Functor C D}
                                 (alpha : F ~> G) (beta : H ~> K) :
                                 (Functor.Comp F H) ~> {C} {E} (Functor.Comp G K) =>
                        \new NatTrans {C} {E} (Functor.Comp F H) (Functor.Comp G K) {
                           | trans {a} => alpha.trans cmp {E} F.map beta.trans
                           | naturality f => E.assoc alpha.trans (F.map beta.trans) (F.map (H.map f)) *>
                                             pmap (E.comp alpha.trans) (F.comp beta.trans (H.map f)) *>
                                             pmap (E.comp alpha.trans) (pmap F.map (beta.naturality f)) *>
                                             pmap (E.comp alpha.trans) (inv (F.comp (K.map f) beta.trans)) *>
                                             (inv (E.assoc alpha.trans (F.map (K.map f)) (F.map beta.trans))) *>
                                             pmap (\lam h => E.comp h (F.map beta.trans)) (alpha.naturality (K.map f)) *>
                                             E.assoc (G.map (K.map f)) alpha.trans (F.map beta.trans)
                           }

                     \func equiv {C D : Cat} (F G : Functor C D)
                                  (trans : \Pi (a : C.Ob) -> (F.ob a ->> {D} G.ob a) )
                                  (alpha beta : NatTrans F G (\lam {a} => trans a)) : alpha = {NatTrans F G} beta =>
                         \let natEq {a b : C.Ob} (f : a ->> {C }b) =>
                             D.homSet (trans b cmp {D} F.map f) (G.map f cmp {D} trans a)
                             (alpha.naturality f) (beta.naturality f)
                         \in path (\lam i =>
                           \new NatTrans F G {
                             | trans {a} => trans a
                             | naturality f => natEq f @ i
                           })

                     \func equiv1 {C D : Cat} (F G G1 : Functor C D) (ge : G = G1)
                                  (trans : \Pi (a : C.Ob) -> (F.ob a ->> {D} G.ob a))
                                  (alpha : NatTrans F G (\lam {a} => trans a))
                                  (beta : NatTrans F G1 (\lam {a} => transport (\lam (GG : Functor C D) => (F.ob a ->> {D} GG.ob a)) ge (trans a))):
                                  alpha = {NatTrans} beta  => {?}


                     \func l_unit {C D : Cat} (F G : Functor C D) (alpha : NatTrans F G) : comp (id G) alpha = alpha =>
                        \let | cig : NatTrans => comp (id G) alpha
                             | alpha' => \new NatTrans {C} {D} F G alpha.trans alpha.naturality
                             | natEq => funExt (\lam (a : C.Ob) => F.ob a ->> {D} G.ob a) (\lam a => cig.trans {a}) (\lam a => alpha.trans {a})
                                        (\lam a => D.l_unit (alpha.trans {a}))
                             | eqq (i : I) => \Pi (a : NatTrans F G (\lam {a} => (inv natEq @ i) a)) (b : NatTrans F G alpha.trans) -> a = {NatTrans F G} b
                        \in coe eqq (equiv F G (\lam a => alpha.trans {a})) right cig alpha'

                     \func r_unit {C D : Cat} (F G : Functor C D) (alpha : NatTrans F G) : comp alpha (id F) = alpha =>
                       \let | cif : NatTrans => comp alpha (id F)
                            | alpha' => \new NatTrans {C} {D} F G alpha.trans alpha.naturality
                            | natEq => funExt (\lam (a : C.Ob) => F.ob a ->> {D} G.ob a) (\lam a => cif.trans {a}) (\lam a => alpha.trans {a})
                                     (\lam a => D.r_unit (alpha.trans {a}))
                            | eqq (i : I) => \Pi (a : NatTrans F G (\lam {a} => (inv natEq @ i) a)) (b : NatTrans F G alpha.trans) -> a = {NatTrans F G} b
                       \in coe eqq (equiv F G (\lam a => alpha.trans {a})) right cif alpha'

                     \func assoc {C D : Cat} (F G H K : Functor C D)
                         (alpha : NatTrans H K)
                         (beta : NatTrans G H)
                         (gamma : NatTrans F G) :
                         comp (comp alpha beta) gamma = comp alpha (comp beta gamma) =>
                       \let | lc : NatTrans => comp (comp alpha beta) gamma
                            | rc : NatTrans => comp alpha (comp beta gamma)
                            | natEq => funExt (\lam (a : C.Ob) => F.ob a ->> {D} K.ob a) (\lam a => lc.trans {a}) (\lam a => rc.trans {a})
                                     (\lam a => D.assoc (alpha.trans {a}) (beta.trans {a}) (gamma.trans {a}) )
                            | eqq (i : I) => \Pi (a : NatTrans F K (\lam {a} => (inv natEq @ i) a)) (b : NatTrans F K rc.trans) -> a = {NatTrans F K} b
                       \in coe eqq (equiv F K (\lam a => rc.trans {a})) right lc rc

-- TODO: fix
                     \func hl_unit {C D : Cat} (F G : Functor C D) (alpha : NatTrans F G) : hcomp (id Functor.Id) alpha = alpha =>
                        \let | ciid : NatTrans => hcomp (id (Functor.Id)) alpha
                             | alpha' => \new NatTrans {C} {D} F G alpha.trans alpha.naturality
                             | natEq => funExt (\lam (a : C.Ob) => F.ob a ->> {D} G.ob a) (\lam a => ciid.trans {a}) (\lam a => alpha.trans {a})
                                        (\lam a => D.l_unit (alpha.trans {a}))
                             | funEq  => Functor.l_unit G
                             | eqq (i : I) => \Pi (a : NatTrans F (funEq @ i) (\lam {a} => (inv natEq @ i) a)) (b : NatTrans F G alpha.trans) -> a = {NatTrans F G} b
                        \in coe eqq (equiv F G (\lam a => alpha.trans {a})) right ciid alpha'






                  }


\func \infix 7 ~> {C D : Cat} (F G : Functor C D) => NatTrans F G
