\import Cat
\import Equiv (QEquiv)
\import Functor
\import Category
\import Paths
\import Set
\open Precat (>>)
\open Functor (o-functor, id-functor)

\func \infix 7 ~> {C D : Precat} (F G : Functor C D) => NatTrans F G

\record NatTrans  {C D : Precat} (F G : Functor C D){
  | trans (a : C) : F.ob a ->> G.ob a

  \property naturality  {a b : C} (f : a ->> b) : trans b `o` map f = map f `o` trans a
}  \where  {
  \use \level natTrans-is-set {C D : Precat} (F G : Functor C D) (x y : NatTrans F G) (p q : x = y) : p = q =>
    \let  | Eqv (x y : F ~> G) => x.trans = y.trans
          | eqq : QEquiv {x = y} {Eqv x y} =>
            Hedberg.propPathEquiv Eqv (\lam u => idp) (\lam {x} {y} e => equiv x y e ) {x} {y}
    \in  inv (eqq.ret_f p) *> pmap eqq.ret (Path.inProp _ _) *> eqq.ret_f q

  \func id-trans {C D : Precat} (F : Functor C D) : NatTrans F F \cowith
    | trans a => id (F.ob a)
    | naturality f => id-right _ *> inv (id-left _ )

  \func vcomp {C D : Precat} {F G H : Functor C D} (u : NatTrans G H) (v : NatTrans F G) : NatTrans F H \cowith
    | trans a => u.trans a `o` v.trans a
    | naturality {a} {b} f => inv (o-assoc _ _ _) *>
    pmap (o (u.trans _)) (v.naturality f) *>
    o-assoc _ _ _ *> pmap (>> (v.trans _)) (u.naturality f) *> inv (o-assoc _ _ _)

  \func hcomp {C D E : Precat} {F G : Functor D E} {H K : Functor C D}
              (alpha : NatTrans F G) (beta : NatTrans H K) : NatTrans {C} {E} (o-functor F H)  (o-functor G K) \cowith
    | trans a => alpha.trans _ `o` map (beta.trans _)
    | naturality f => inv (o-assoc _ _ _) *>
    pmap (o (alpha.trans _)) (F.func_comp _ _ *> pmap F.map (beta.naturality f) *> inv (F.func_comp _ _)) *>
    o-assoc _ _ _ *> pmap (>> (F.map (beta.trans _))) (alpha.naturality _) *> inv (o-assoc _ _ _)

  \func equiv {C D : Precat} {F G : Functor C D}
              (alpha beta : NatTrans F G)
              (p : alpha.trans = beta.trans) : alpha = beta =>
    \let natEq {a b : C} (f : a ->> b) =>
           pathInProp (\lam i => (p @ i) b `o` map f = map f `o` (p @ i) a) (alpha.naturality f) (beta.naturality f)
    \in path (\lam i => \new NatTrans F G {
      | trans => p @ i
      | naturality f => natEq f @ i
    })

  \func vl_unit {C D : Precat} {F G : Functor C D} (u : NatTrans F G) : vcomp (id-trans G) u = u =>
    equiv (vcomp (id-trans G) u) u (path (\lam i a => D.id-right (u.trans a) @ i))

  \func vr_unit {C D : Precat} {F G : Functor C D} (u : NatTrans F G) : vcomp u (id-trans F) = u =>
    equiv (vcomp u (id-trans F) ) u (path (\lam i a => D.id-left (u.trans a) @ i))

  \func vassoc {C D : Precat} {F G H K : Functor C D}
               (u : NatTrans H K) (v : NatTrans G H) (w : NatTrans F G) :
    vcomp (vcomp u v) w = vcomp u (vcomp v w) =>
    equiv (vcomp (vcomp u v) w) (vcomp u (vcomp v w)) (path (\lam i a => inv (o-assoc (w.trans _) (v.trans _) (u.trans _)) @ i))

  --  \func hl_unit {C D : Precat} (F G : Functor C D) (alpha : NatTrans F G) :
  --    hcomp {C} {D} {D} {id-functor D} {id-functor D} {F} {G} (id-trans (id-functor D)) alpha = coe (ttrans F G) alpha right =>
  --    \let  | idf => id-functor D
  --          | idt => id-trans idf
  --          | eq1 => inv (Functor.Id-left F)
  --          | eq2 => inv (Functor.Id-left G)
  --          | cmt : NatTrans (o-functor idf F) (o-functor idf G) => hcomp {C} {D} {D} {idf} {idf} idt alpha
  --          | t : NatTrans (o-functor idf F) (o-functor idf G)  => coe (\lam i => NatTrans (eq1 @ i) (eq2 @ i) ) alpha right
  --          | a=t : alpha = {NatTrans F G} t => path(\lam i => {?})
  --          | t= (a : C) : cmt.trans a = t.trans a => id-right (alpha.trans a) *> {?}

  --    \in {?} \where {
  --    \func idl_functor {C D : Precat} (F : Functor C D) (i : I) : Functor C D => inv (Functor.Id-left {C} {D} F) @ i
  --
--    \func ttrans {C D : Precat} (F G : Functor C D) (i : I) => NatTrans (idl_functor F i) (idl_functor G i)
  --  }


}

