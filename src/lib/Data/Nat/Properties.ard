\import lib.Data.Nat
\import lib.Paths
\open Nat

-- Properties of =

\func suc/=0 {n : Nat} (p : suc n = 0) {A : \Type} : A
  => coe (\lam i => \case p @ i \with { suc _ => Nat | 0 => A }) 0 right

-- TODO: dec of =

-- Properties of +

\func zero-+ {n : Nat} : 0 + n = n \elim n
  | 0 => idp
  | suc n => pmap suc zero-+

\func +-assoc {n m k : Nat} : (n + m) + k = n + (m + k) \elim k
  | 0 => idp
  | suc k => pmap suc +-assoc

\func +-comm {n m : Nat} : n + m = m + n \elim n, m
  | 0, 0 => idp
  | suc n, 0 => pmap suc (inv zero-+)
  | 0, suc m => pmap suc zero-+
  | suc n, suc m => pmap suc (+-comm *> pmap suc (inv +-comm) *> +-comm)

-- Properties of <=

\func <=-refl {n : Nat} : n <= n \elim n
  | 0 => zero<=_
  | suc n => suc<=suc <=-refl

\func <=-trans {n m k : Nat} (p : n <= m) (q : m <= k) : n <= k \elim n, m, k, p, q
  | 0, _, _, _, _ => zero<=_
  | suc n, suc m, suc k, suc<=suc p, suc<=suc q => suc<=suc (<=-trans p q)

-- TODO: antisym, tri of <

\func <=-suc {n : Nat} : n <= suc n \elim n
  | 0 => zero<=_
  | suc n => suc<=suc <=-suc

\func +-<= {n : Nat} (m : Nat) : n <= n + m \elim m
  | 0 => <=-refl
  | suc m => <=-trans (+-<= m) <=-suc

\func <=-+ {n m : Nat} (p : n <= m) : n + (m - n) = m \elim n, m, p
  | 0, 0, _ => idp
  | 0, suc m, _ => pmap suc zero-+
  | suc n, suc m, suc<=suc p => +-comm *> pmap suc (+-comm *> <=-+ p)