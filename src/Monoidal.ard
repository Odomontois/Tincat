\import Cartesian
\import Category
\import Functor
\import NatTrans.Iso
\open Functor (<o>, Id, o-functor)
\import Paths

\class Monoidal \extends Precat {
  | unit : Ob
  | Tensor : Bifunctor \this \this \this

  | left-unitor : NatIso (LeftUnitF unit Tensor) (Id \this)
  | right-unitor : NatIso (RightUnitF unit Tensor) (Id \this)
  | associator : NatIso (assocL Tensor) (assocR Tensor)

  \property pentagonal : \Sigma
  \property triagonal : \Sigma
} \where {
  \func LeftUnitF {C : Precat} (u : C) (T : Functor (C [x] C) C) : Functor C C \cowith
    | ob a => T.ob (a, u)
    | map f => T.map (f, id u)
    | functor_id a => T.functor_id (a, u)
    | func_comp f g  => T.func_comp (f, id u) (g, id u) *> pmap (\lam x => T.map (f `o` g, x)) (C.id-right (id u))

  \func RightUnitF {C : Precat} (u : C) (T : Functor (C [x] C) C) : Functor C C \cowith
    | ob a => T.ob (u, a)
    | map f => T.map (id u, f)
    | functor_id a => T.functor_id (u, a)
    | func_comp f g  => T.func_comp (id u, f) (id u, g) *> pmap (\lam x => T.map (x, f `o` g)) (C.id-right (id u))

  \func assocL {C : Precat} (T : Functor (C [x] C) C) => o-functor {C [x] C [x] C} {C [x] C} {C} T (T <<x>> Id C)

  \func assocR {C : Precat} (T : Functor (C [x] C) C) =>
    o-functor {C [x] C [x] C} {C [x] C} {C} T
              (o-functor {C [x] C [x] C} {C [x] (C [x] C)} {C [x] C} (Id C <<x>> T) assoc-functor)
}